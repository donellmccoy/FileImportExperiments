// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using FileImportExperiments.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace FileImportExperiments.Models.Configurations
{
    public partial class ImageBatchConfiguration : IEntityTypeConfiguration<ImageBatch>
    {
        public void Configure(EntityTypeBuilder<ImageBatch> entity)
        {
            entity.ToTable("IMAGE_BATCH");

            entity.Property(e => e.ImageBatchId).HasColumnName("IMAGE_BATCH_ID");
            entity.Property(e => e.BatchCreationDate)
            .HasColumnType("datetime")
            .HasColumnName("BATCH_CREATION_DATE");
            entity.Property(e => e.BatchTitle)
            .IsRequired()
            .HasMaxLength(15)
            .IsUnicode(false)
            .HasColumnName("BATCH_TITLE");
            entity.Property(e => e.BeginningImageBatchDocumentReferenceId).HasColumnName("BEGINNING_IMAGE_BATCH_DOCUMENT_REFERENCE_ID");
            entity.Property(e => e.CreateDate)
            .HasColumnType("datetime")
            .HasColumnName("CREATE_DATE");
            entity.Property(e => e.DataCenterActualCertificationDate)
            .HasColumnType("datetime")
            .HasColumnName("DATA_CENTER_ACTUAL_CERTIFICATION_DATE");
            entity.Property(e => e.DataCenterExpectedCertificationDate)
            .HasColumnType("datetime")
            .HasColumnName("DATA_CENTER_EXPECTED_CERTIFICATION_DATE");
            entity.Property(e => e.DataCenterPerformanceTargetHours).HasColumnName("DATA_CENTER_PERFORMANCE_TARGET_HOURS");
            entity.Property(e => e.DateOfFileId).HasColumnName("DATE_OF_FILE_ID");
            entity.Property(e => e.EndingImageBatchDocumentReferenceId).HasColumnName("ENDING_IMAGE_BATCH_DOCUMENT_REFERENCE_ID");
            entity.Property(e => e.EstimatedDocCount).HasColumnName("ESTIMATED_DOC_COUNT");
            entity.Property(e => e.ImageBatchFileName)
            .IsRequired()
            .HasMaxLength(25)
            .IsUnicode(false)
            .HasColumnName("IMAGE_BATCH_FILE_NAME");
            entity.Property(e => e.IsDataCenterSuccessful)
            .HasDefaultValueSql("('False')")
            .HasColumnName("IS_DATA_CENTER_SUCCESSFUL");
            entity.Property(e => e.IsMpcSuccessful)
            .HasDefaultValueSql("('False')")
            .HasColumnName("IS_MPC_SUCCESSFUL");
            entity.Property(e => e.IsOverallSuccessful)
            .HasDefaultValueSql("('False')")
            .HasColumnName("IS_OVERALL_SUCCESSFUL");
            entity.Property(e => e.IsPartialDateOfFile)
            .HasDefaultValueSql("('True')")
            .HasColumnName("IS_PARTIAL_DATE_OF_FILE");
            entity.Property(e => e.IsVendorSuccessful).HasColumnName("IS_VENDOR_SUCCESSFUL");
            entity.Property(e => e.MidasBatchId).HasColumnName("MIDAS_BATCH_ID");
            entity.Property(e => e.MidasPackageId).HasColumnName("MIDAS_PACKAGE_ID");
            entity.Property(e => e.MpcPerformanceTargetHours).HasColumnName("MPC_PERFORMANCE_TARGET_HOURS");
            entity.Property(e => e.MpcTurnaroundTimeMinutes).HasColumnName("MPC_TURNAROUND_TIME_MINUTES");
            entity.Property(e => e.OverallTurnaroundTimeMinutes).HasColumnName("OVERALL_TURNAROUND_TIME_MINUTES");
            entity.Property(e => e.ReplacedWithImageBatchId).HasColumnName("REPLACED_WITH_IMAGE_BATCH_ID");
            entity.Property(e => e.UpdateDate)
            .HasColumnType("datetime")
            .HasColumnName("UPDATE_DATE");
            entity.Property(e => e.VendorActualDocCount).HasColumnName("VENDOR_ACTUAL_DOC_COUNT");
            entity.Property(e => e.VendorActualReceiptDate)
            .HasColumnType("datetime")
            .HasColumnName("VENDOR_ACTUAL_RECEIPT_DATE");
            entity.Property(e => e.VendorExpectedReceiptDate)
            .HasColumnType("datetime")
            .HasColumnName("VENDOR_EXPECTED_RECEIPT_DATE");
            entity.Property(e => e.VendorPerformanceTargetHours).HasColumnName("VENDOR_PERFORMANCE_TARGET_HOURS");
            entity.Property(e => e.VendorTurnaroundTimeMinutes).HasColumnName("VENDOR_TURNAROUND_TIME_MINUTES");

            entity.HasOne(d => d.BeginningImageBatchDocumentReference).WithMany(p => p.ImageBatchBeginningImageBatchDocumentReference)
            .HasForeignKey(d => d.BeginningImageBatchDocumentReferenceId)
            .OnDelete(DeleteBehavior.ClientSetNull)
            .HasConstraintName("FK_IMAGE_BATCH_IMAGE_BATCH_DOCUMENT_REFERENCE_BEGINNING");

            entity.HasOne(d => d.DateOfFile).WithMany(p => p.ImageBatch)
            .HasForeignKey(d => d.DateOfFileId)
            .OnDelete(DeleteBehavior.ClientSetNull)
            .HasConstraintName("FK_DATE_OF_FILE_IMAGE_BATCH");

            entity.HasOne(d => d.EndingImageBatchDocumentReference).WithMany(p => p.ImageBatchEndingImageBatchDocumentReference)
            .HasForeignKey(d => d.EndingImageBatchDocumentReferenceId)
            .OnDelete(DeleteBehavior.ClientSetNull)
            .HasConstraintName("FK_IMAGE_BATCH_IMAGE_BATCH_DOCUMENT_REFERENCE_ENDING");

            entity.HasOne(d => d.ReplacedWithImageBatch).WithMany(p => p.InverseReplacedWithImageBatch)
            .HasForeignKey(d => d.ReplacedWithImageBatchId)
            .HasConstraintName("FK_IMAGE_BATCH_IMAGE_BATCH");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<ImageBatch> entity);
    }
}
