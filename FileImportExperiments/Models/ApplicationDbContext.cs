// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using FileImportExperiments.Models.Configurations;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
#nullable disable

namespace FileImportExperiments.Models;

public partial class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Batch> Batch { get; set; }

    public virtual DbSet<BatchStatus> BatchStatus { get; set; }

    public virtual DbSet<BookPageReference> BookPageReference { get; set; }

    public virtual DbSet<ClerkNumberTracking> ClerkNumberTracking { get; set; }

    public virtual DbSet<CngapList> CngapList { get; set; }

    public virtual DbSet<CngapResults> CngapResults { get; set; }

    public virtual DbSet<County> County { get; set; }

    public virtual DbSet<CountyArchivePath> CountyArchivePath { get; set; }

    public virtual DbSet<CountyFtpPath> CountyFtpPath { get; set; }

    public virtual DbSet<DataCenter> DataCenter { get; set; }

    public virtual DbSet<DateOfFile> DateOfFile { get; set; }

    public virtual DbSet<DocumentDescription> DocumentDescription { get; set; }

    public virtual DbSet<DocumentDescriptionRcvd> DocumentDescriptionRcvd { get; set; }

    public virtual DbSet<ErrorDescription> ErrorDescription { get; set; }

    public virtual DbSet<Event> Event { get; set; }

    public virtual DbSet<EventType> EventType { get; set; }

    public virtual DbSet<GetNewWorkLock> GetNewWorkLock { get; set; }

    public virtual DbSet<ImageBatch> ImageBatch { get; set; }

    public virtual DbSet<ImageBatchDocumentReference> ImageBatchDocumentReference { get; set; }

    public virtual DbSet<ImageBatchFtpUpload> ImageBatchFtpUpload { get; set; }

    public virtual DbSet<NonWeekendHoliday> NonWeekendHoliday { get; set; }

    public virtual DbSet<OnDemandReport> OnDemandReport { get; set; }

    public virtual DbSet<OnDemandReportPath> OnDemandReportPath { get; set; }

    public virtual DbSet<PerformanceTarget> PerformanceTarget { get; set; }

    public virtual DbSet<PostingAttempt> PostingAttempt { get; set; }

    public virtual DbSet<PostingAttemptStatus> PostingAttemptStatus { get; set; }

    public virtual DbSet<PostingResult> PostingResult { get; set; }

    public virtual DbSet<PostingResultErrorDetail> PostingResultErrorDetail { get; set; }

    public virtual DbSet<ProcessingUnit> ProcessingUnit { get; set; }

    public virtual DbSet<Setting> Setting { get; set; }

    public virtual DbSet<Task> Task { get; set; }

    public virtual DbSet<TaskDetail> TaskDetail { get; set; }

    public virtual DbSet<TaskDetailBlob> TaskDetailBlob { get; set; }

    public virtual DbSet<TaskType> TaskType { get; set; }

    public virtual DbSet<TempDeleteTasks> TempDeleteTasks { get; set; }

    public virtual DbSet<UnchainedLegalDescription> UnchainedLegalDescription { get; set; }

    public virtual DbSet<UserEvent> UserEvent { get; set; }

    public virtual DbSet<UserInfo> UserInfo { get; set; }

    public virtual DbSet<WorkDay> WorkDay { get; set; }

    public virtual DbSet<WorkflowCounty> WorkflowCounty { get; set; }

    public virtual DbSet<WorkflowDataCenter> WorkflowDataCenter { get; set; }

    public virtual DbSet<YearNumberReference> YearNumberReference { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
            modelBuilder.ApplyConfiguration(new Configurations.BatchConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.BatchStatusConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.BookPageReferenceConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ClerkNumberTrackingConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CngapListConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CngapResultsConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CountyConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CountyArchivePathConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CountyFtpPathConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DataCenterConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DateOfFileConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DocumentDescriptionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DocumentDescriptionRcvdConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ErrorDescriptionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EventConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EventTypeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.GetNewWorkLockConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ImageBatchConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ImageBatchDocumentReferenceConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ImageBatchFtpUploadConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.NonWeekendHolidayConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.OnDemandReportConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.OnDemandReportPathConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PerformanceTargetConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PostingAttemptConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PostingAttemptStatusConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PostingResultConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PostingResultErrorDetailConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProcessingUnitConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.SettingConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TaskConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TaskDetailConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TaskDetailBlobConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TaskTypeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TempDeleteTasksConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.UnchainedLegalDescriptionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.UserEventConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.UserInfoConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.WorkDayConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.WorkflowCountyConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.WorkflowDataCenterConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.YearNumberReferenceConfiguration());

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
